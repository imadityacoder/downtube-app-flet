name: Build & Release

on:
  pull_request:
    branches: [dev, test, main]
  push:
    branches: [dev, test, main]

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set Up Java
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'

      # 3. Set Up Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          channel: 'stable'

      - name: List files for debugging
        run: ls -l

      # 5. Build APK
      - name: Build APK
        run: flutter build apk --release

      # 6. Build App Bundle (AAB)
      - name: Build App Bundle
        run: flutter build appbundle

      # 7. Build IPA (iOS)
      - name: Build IPA
        run: flutter build ipa --no-codesign

      # 8. Compress iOS Build
      - name: Compress iOS Build
        run: |
          cd build
          tar -czf ios_build.tar.gz ios

      # 9. Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios_build.tar.gz


      # 11. Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 12. Modify Tag if Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # 13. Create GitHub Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk,
            build/app/outputs/bundle/release/app-release.aab,
            build/ios_build.tar.gz
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
